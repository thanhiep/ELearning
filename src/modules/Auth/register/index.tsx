import { Typography, Form, Row, Col, Input, Button, Modal, Select } from "antd";
import { Link, useNavigate } from "react-router-dom";
import { useMutation } from "@tanstack/react-query";
import { registerApi } from "../../../apis/user";
import { Controller, useForm } from "react-hook-form";
import "./../style.css";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useState } from "react";
import {
  ALPHA_NUMBER_REGEX,
  EMAIL_REGEX,
  PHONE_REGEX,
  VIETNAMESE_REGEX,
} from "../../../constants";

const schema = yup.object({
  hoTen: yup
    .string()
    .trim()
    .required("(*) Vui l√≤ng nh·∫≠p h·ªç t√™n")
    .matches(VIETNAMESE_REGEX, "(*) H·ªç t√™n ch·ªâ ƒë∆∞·ª£c nh·∫≠p ch·ªØ")
    .min(6, "(*) H·ªç t√™n qu√° ng·∫Øn"),
  taiKhoan: yup
    .string()
    .required("(*) Vui l√≤ng nh·∫≠p t√†i kho·∫£n")
    .matches(ALPHA_NUMBER_REGEX, "(*) T√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát")
    .min(4, "(*) T√†i kho·∫£n qu√° ng·∫Øn"),
  matKhau: yup
    .string()
    .required("(*) Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
    .min(8, "(*) M·∫≠t kh·∫©u qu√° ng·∫Øn")
    .max(32, "(*) M·∫≠t kh·∫©u ch·ªâ ƒë∆∞·ª£c t·ªëi ƒëa 32 k√Ω t·ª±"),
  email: yup
    .string()
    .required("(*) Vui l√≤ng nh·∫≠p email")
    .matches(EMAIL_REGEX, "(*) Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng"),
  soDT: yup
    .string()
    .required("(*) Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")
    .matches(PHONE_REGEX, "(*) S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng"),
  maNhom: yup.string(),
});

export default function RegisterPage() {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isRegisterFail, setIsRegisterFail] = useState(false)

  const {
    handleSubmit,
    control,
    formState: { errors },
  } = useForm({
    defaultValues: {
      hoTen: "",
      taiKhoan: "",
      matKhau: "",
      email: "",
      soDT: "",
      maNhom: "GP01",
    },
    mode: `onChange`,
    resolver: yupResolver(schema),
  });

  const navigate = useNavigate();

  const { mutate: handleRegister, isPending } = useMutation({
    mutationFn: (payload: any) => registerApi(payload),
    onSuccess: () => {
      setIsModalVisible(true);
    },
    onError: (error) => {
      console.log("onError", error);
      setIsRegisterFail(true)
    },
  });

  const onSubmit = (formValues: any) => {
    handleRegister(formValues);
  };

  const handleTryAgain = () => {
    setIsRegisterFail(false);
  };

  return (
    <div className="authForm">
      <div className="w-[400px]">
        <div className="my-4 text-center">
          <Typography className="font-bold text-4xl">T·∫°o t√†i kho·∫£n</Typography>
          <Typography className="mt-2 text-lg">
            Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi m√¥i tr∆∞·ªùng V-Learning üëã
          </Typography>
        </div>

        <Form layout="vertical" onFinish={handleSubmit(onSubmit)}>
          <Row gutter={[48, 16]}>
            <Col span={24}>
              <label className="text-lg text-[#6A7280]">H·ªç t√™n</label>
              <Controller
                name="hoTen"
                control={control}
                render={({ field }) => (
                  <>
                    <Input
                      type="text"
                      size="large"
                      className="mt-1"
                      placeholder="Vui l√≤ng nh·∫≠p h·ªç t√™n..."
                      {...field}
                    />
                    {errors.hoTen && (
                      <span className="errorMess">{errors.hoTen.message}</span>
                    )}
                  </>
                )}
              />
            </Col>
            <Col span={24}>
              <label className="text-lg text-[#6A7280]">T√†i kho·∫£n</label>
              <Controller
                name="taiKhoan"
                control={control}
                render={({ field }) => (
                  <>
                    <Input
                      type="text"
                      size="large"
                      className="mt-1"
                      placeholder="Vui l√≤ng nh·∫≠p t√†i kho·∫£n..."
                      {...field}
                    />
                    {errors.taiKhoan && (
                      <span className="errorMess">
                        {errors.taiKhoan.message}
                      </span>
                    )}
                  </>
                )}
              />
            </Col>
            <Col span={24}>
              <label className="text-lg text-[#6A7280]">M·∫≠t kh·∫©u</label>
              <Controller
                name="matKhau"
                control={control}
                render={({ field }) => (
                  <>
                    <Input
                      type="password"
                      size="large"
                      className="mt-1"
                      placeholder="Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u..."
                      {...field}
                    />
                    {errors.matKhau && (
                      <span className="errorMess">
                        {errors.matKhau.message}
                      </span>
                    )}
                  </>
                )}
              />
            </Col>
            <Col span={24}>
              <label className="text-lg text-[#6A7280]">Email</label>
              <Controller
                name="email"
                control={control}
                render={({ field }) => (
                  <>
                    <Input
                      type="text"
                      size="large"
                      className="mt-1"
                      placeholder="Vui l√≤ng nh·∫≠p email..."
                      {...field}
                    />
                    {errors.email && (
                      <span className="errorMess">{errors.email.message}</span>
                    )}
                  </>
                )}
              />
            </Col>
            <Col span={16}>
              <label className="text-lg text-[#6A7280]">S·ªë ƒëi·ªán tho·∫°i</label>
              <Controller
                name="soDT"
                control={control}
                render={({ field }) => (
                  <>
                    <Input
                      type="text"
                      size="large"
                      className="mt-1"
                      placeholder="Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i..."
                      {...field}
                    />
                    {errors.soDT && (
                      <span className="errorMess">{errors.soDT.message}</span>
                    )}
                  </>
                )}
              />
            </Col>
            <Col span={8}>
              <label className="text-lg text-[#6A7280]">M√£ nh√≥m</label>
              <Controller
                name="maNhom"
                control={control}
                render={({ field }) => (
                  <>
                    <Select
                      {...field}
                      size="large"
                      defaultValue="GP01"
                      className="mt-1"
                      style={{ width: 100, display: "block" }}
                      options={[
                        { value: "GP01", label: "GP01" },
                        { value: "GP02", label: "GP02" },
                        { value: "GP03", label: "GP03" },
                        { value: "GP04", label: "GP04" },
                        { value: "GP05", label: "GP05" },
                        { value: "GP06", label: "GP06" },
                        { value: "GP07", label: "GP07" },
                        { value: "GP08", label: "GP08" },
                        { value: "GP09", label: "GP09" },
                        { value: "GP10", label: "GP10" },
                      ]}
                    />
                  </>
                )}
              />
            </Col>
            <Col span={24}>
              <Button
                loading={isPending}
                disabled={isPending}
                className="authSubmit mt-4"
                htmlType="submit"
                size="large"
                block
              >
                T·∫°o t√†i kho·∫£n
              </Button>
            </Col>
          </Row>
        </Form>

        <Typography className="mt-8 text-center">
          ƒê√£ c√≥ t√†i kho·∫£n?
          <Link to={"/auth/login"}>
            <span className="text-blue-700 font-medium cursor-pointer">
              ƒêƒÉng nh·∫≠p
            </span>
          </Link>
        </Typography>
        <Typography className="mt-4" style={{ textAlign: "center" }}>
          <Link to={"/"} className="text-blue-700 font-medium">
            V·ªÅ trang ch·ªß
          </Link>
        </Typography>
      </div>

      <Modal
        title="T·∫°o t√†i kho·∫£n th√†nh c√¥ng"
        open={isModalVisible}
        footer={null}
        className="authModal registerModal"
        closable={false}
        centered
      >
        <img src="src/assets/img/successIcon.png" alt="" />
        <p>B·∫°n ƒë√£ t·∫°o t√†i kho·∫£n th√†nh c√¥ng, vui l√≤ng ƒëƒÉng nh·∫≠p.</p>
        <Button
          className="tryAgainBtn mt-5"
          onClick={() => {
            navigate("/auth/login");
          }}
        >
          ƒêƒÉng nh·∫≠p
        </Button>
      </Modal>

      <Modal
        title="T·∫°o t√†i kho·∫£n kh√¥ng th√†nh c√¥ng"
        open={isRegisterFail}
        footer={null}
        className="authModal  loginModal"
        closable={false}
        centered
      >
        <img src="src/assets/img/login-fail-icon.png" alt="" />
        <p>T√†i kho·∫£n ho·∫∑c email ƒë√£ t·ªìn t·∫°i, vui l√≤ng th·ª≠ l·∫°i.</p>
        <Button
          className="tryAgainBtn mt-5"
          onClick={handleTryAgain}
        >
          Th·ª≠ l·∫°i
        </Button>
      </Modal>
    </div>
  );
}
